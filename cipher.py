"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Surabhi Arun, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: sa59594
"""


def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    rails = []
    for _ in range(key):
        rails.append([])
    row = 0
    going_down = True
    for char in string:
        rails[row].append(char)
        if row == 0:
            going_down = True
        elif row == key - 1:
            going_down = False
        if going_down:
            row += 1
        else:
            row -= 1
    result = ""
    for rail in rails:
        for char in rail:
            result += char
    return result



def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    grid = []
    for i in range(key):
        row = ['*'] * len(string)
        grid.append(row)
    row = 0
    going_down = True
    for col in range(len(string)):
        grid[row][col] = 'X'
        if row == 0:
            going_down = True
        if row == key - 1:
            going_down = False
        if going_down:
            row += 1
        else:
            row -= 1
    index = 0
    for i in range(key):
        for j in range(len(string)):
            if grid[i][j] == 'X' and index < len(string):
                grid[i][j] = string[index]
                index += 1

    result = ""
    row = 0
    going_down = True
    for col in range(len(string)):
        result += grid[row][col]
        if row == 0:
            going_down = True
        if row == key - 1:
            going_down = False
        if going_down:
            row += 1
        else:
            row -= 1
    return result


def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    string = string.lower()
    result = ""
    for char in string:
        if char >= 'a' and char <= 'z':
            result += char
    return result



def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    p_val = ord(p) - ord('a')
    s_val = ord(s) - ord('a')

    encoded_val = (s_val + p_val) % 26
    encoded_char = chr(encoded_val + ord('a'))
    return encoded_char



def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    p_val = ord(p) - ord('a')
    s_val = ord(s) - ord('a')

    decoded_val = (s_val - p_val) % 26
    decoded_char = chr(decoded_val + ord('a'))
    return decoded_char



def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    clean_string = filter_string(string)
    clean_phrase = filter_string(phrase)
    if len(clean_phrase) == 0:
        return ""
    result = ""
    for i in range(len(clean_string)):
        text_char = clean_string[i]
        phrase_char = clean_phrase[i % len(clean_phrase)]
        encoded_char = encode_character(phrase_char, text_char)
        result += encoded_char
    return result



def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    filtered_string = filter_string(string)
    filtered_phrase = filter_string(phrase)
    if not filtered_phrase or not filtered_string:
        return ""
    result = ""
    for i in range(len(filtered_string)):
        p = filtered_phrase[i % len(filtered_phrase)]
        s = filtered_string[i]
        result += decode_character(p, s)
    return result


def main():
    """Main function that reads stdin and runs each cipher"""
    # read the plain text from stdin (terminal/input)

    # read the key from stdin (terminal/input)

    # encrypt and print the encoded text using rail fence cipher

    # read encoded text from stdin (terminal/input)

    # read the key from stdin (terminal/input)

    # decrypt and print the plain text using rail fence cipher

    # read the plain text from stdin (terminal/input)

    # read the pass phrase from stdin (terminal/input)

    # encrypt and print the encoded text using Vigenere cipher

    # read the encoded text from stdin (terminal/input)

    # read the pass phrase from stdin (terminal/input)

    # decrypt and print the plain text using Vigenere cipher
    print("Rail Fence Cipher\n")

    plain_text = input()
    key = int(input())
    encoded_text = rail_fence_encode(plain_text, key)
    print(f"Plain Text: {plain_text}")
    print(f"Key: {key}")
    print(f"Encoded Text: {encoded_text}\n")
    encoded_text = input()
    key = int(input())
    decoded_text = rail_fence_decode(encoded_text, key)
    print(f"Encoded Text: {encoded_text}")
    print(f"Enter Key: {key}")
    print(f"Decoded Text: {decoded_text}\n")
    print("Vigenere Cipher\n")
    plain_text = input()
    pass_phrase = input()
    encoded_text = vigenere_encode(plain_text, pass_phrase)
    print(f"Plain Text: {plain_text}")
    print(f"Pass Phrase: {pass_phrase}")
    print(f"Encoded Text: {encoded_text}\n")
    encoded_text = input()
    pass_phrase = input()
    decoded_text = vigenere_decode(encoded_text, pass_phrase)
    print(f"Encoded Text: {encoded_text}")
    print(f"Pass Phrase: {pass_phrase}")
    print(f"Decoded Text: {decoded_text}\n")



# Do NOT modify the following code.
if __name__ == "__main__":
    main()